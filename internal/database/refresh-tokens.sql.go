// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh-tokens.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const addRefreshToken = `-- name: AddRefreshToken :one
INSERT INTO refresh_tokens (
	token,
	created_at,
	updated_at,
	expires_at,
	user_id
) VALUES (
	$1,
	$2,
	$3,
	$4,
	$5
)
RETURNING token, created_at, updated_at, expires_at, revoked_at, user_id
`

type AddRefreshTokenParams struct {
	Token     string
	CreatedAt time.Time
	UpdatedAt time.Time
	ExpiresAt time.Time
	UserID    uuid.UUID
}

func (q *Queries) AddRefreshToken(ctx context.Context, arg AddRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, addRefreshToken,
		arg.Token,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ExpiresAt,
		arg.UserID,
	)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.UserID,
	)
	return i, err
}

const getExpiry = `-- name: GetExpiry :one
SELECT expires_at, revoked_at FROM refresh_tokens
WHERE token=$1 AND user_id=$2 LIMIT 1
`

type GetExpiryParams struct {
	Token  string
	UserID uuid.UUID
}

type GetExpiryRow struct {
	ExpiresAt time.Time
	RevokedAt sql.NullTime
}

func (q *Queries) GetExpiry(ctx context.Context, arg GetExpiryParams) (GetExpiryRow, error) {
	row := q.db.QueryRowContext(ctx, getExpiry, arg.Token, arg.UserID)
	var i GetExpiryRow
	err := row.Scan(&i.ExpiresAt, &i.RevokedAt)
	return i, err
}

const getUserFromRefreshToken = `-- name: GetUserFromRefreshToken :one
SELECT users.id, users.created_at, users.updated_at, users.email, users.hashed_password, users.is_chirpy_red FROM users
WHERE id=(
	SELECT refresh_tokens.user_id FROM refresh_tokens
	WHERE token=$1 LIMIT 1
) LIMIT 1
`

func (q *Queries) GetUserFromRefreshToken(ctx context.Context, token string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserFromRefreshToken, token)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const revokeToken = `-- name: RevokeToken :exec
UPDATE refresh_tokens
SET revoked_at=$2, updated_at=$2
WHERE token=$1
`

type RevokeTokenParams struct {
	Token     string
	RevokedAt sql.NullTime
}

func (q *Queries) RevokeToken(ctx context.Context, arg RevokeTokenParams) error {
	_, err := q.db.ExecContext(ctx, revokeToken, arg.Token, arg.RevokedAt)
	return err
}
